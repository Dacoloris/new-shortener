// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transport/rest/handler.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLs is a mock of URLs interface.
type MockURLs struct {
	ctrl     *gomock.Controller
	recorder *MockURLsMockRecorder
}

// MockURLsMockRecorder is the mock recorder for MockURLs.
type MockURLsMockRecorder struct {
	mock *MockURLs
}

// NewMockURLs creates a new mock instance.
func NewMockURLs(ctrl *gomock.Controller) *MockURLs {
	mock := &MockURLs{ctrl: ctrl}
	mock.recorder = &MockURLsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLs) EXPECT() *MockURLsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURLs) Create(ctx context.Context, original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockURLsMockRecorder) Create(ctx, original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLs)(nil).Create), ctx, original)
}

// GetOriginalByShort mocks base method.
func (m *MockURLs) GetOriginalByShort(ctx context.Context, short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalByShort", ctx, short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalByShort indicates an expected call of GetOriginalByShort.
func (mr *MockURLsMockRecorder) GetOriginalByShort(ctx, short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalByShort", reflect.TypeOf((*MockURLs)(nil).GetOriginalByShort), ctx, short)
}
